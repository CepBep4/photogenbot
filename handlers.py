from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import db
from texts import get_text

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PaymentStates(StatesGroup):
    waiting_for_amount = State()

class PromptStates(StatesGroup):
    waiting_for_custom_prompt = State()

class GenerationStates(StatesGroup):
    waiting_for_photo = State()

def get_language_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")
    builder.button(text="üá∫üá∏ English", callback_data="lang_en")
    builder.adjust(2)
    return builder.as_markup()

def get_main_menu_keyboard(language):
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.button(
        text=get_text(language, "send_photo"), 
        callback_data="send_photo"
    )
    builder.button(
        text=get_text(language, "settings"), 
        callback_data="settings"
    )
    builder.adjust(1)
    return builder.as_markup()

def get_settings_keyboard(language, balance):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    builder = InlineKeyboardBuilder()
    builder.button(
        text=get_text(language, "top_up_balance"), 
        callback_data="top_up_balance"
    )
    builder.button(
        text=get_text(language, "change_language"), 
        callback_data="change_language"
    )
    builder.button(
        text=get_text(language, "back_to_menu"), 
        callback_data="back_to_menu"
    )
    builder.adjust(1)
    return builder.as_markup()

def get_payment_methods_keyboard(language):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    builder = InlineKeyboardBuilder()
    builder.button(
        text=get_text(language, "yookassa"), 
        callback_data="payment_yookassa"
    )
    builder.button(
        text=get_text(language, "card_transfer"), 
        callback_data="payment_card"
    )
    builder.button(
        text=get_text(language, "sbp"), 
        callback_data="payment_sbp"
    )
    builder.button(
        text=get_text(language, "back_to_settings"), 
        callback_data="back_to_settings"
    )
    builder.adjust(1)
    return builder.as_markup()

def get_templates_keyboard(language, page=0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    templates_per_page = 5
    total_templates = 20
    total_pages = (total_templates + templates_per_page - 1) // templates_per_page
    
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_template = page * templates_per_page + 1
    end_template = min(start_template + templates_per_page - 1, total_templates)
    
    for i in range(start_template, end_template + 1):
        builder.button(
            text=get_text(language, f"template_{i}"), 
            callback_data=f"template_{i}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–°–≤–æ–π –ø—Ä–æ–º–ø—Ç" –∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    builder.button(
        text=get_text(language, "custom_prompt"), 
        callback_data="custom_prompt"
    )
    builder.button(
        text=get_text(language, "back_to_menu"), 
        callback_data="back_to_menu"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if total_pages > 1:
        nav_row = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if page > 0:
            nav_row.append(("‚¨ÖÔ∏è", f"templates_page_{page - 1}"))
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        nav_row.append((f"{page + 1}/{total_pages}", "current_page"))
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if page < total_pages - 1:
            nav_row.append(("‚û°Ô∏è", f"templates_page_{page + 1}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        for text, callback_data in nav_row:
            if callback_data != "current_page":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                builder.button(text=text, callback_data=callback_data)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: —à–∞–±–ª–æ–Ω—ã –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥, –∑–∞—Ç–µ–º 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥, –∑–∞—Ç–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    layout = [1] * (end_template - start_template + 1) + [2] + [len(nav_row) if total_pages > 1 else 0]
    builder.adjust(*[x for x in layout if x > 0])
    
    return builder.as_markup()

def get_custom_prompt_keyboard(language):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(
        text=get_text(language, "back_to_templates"), 
        callback_data="back_to_templates"
    )
    builder.adjust(1)
    return builder.as_markup()

def get_prompt_review_keyboard(language):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —É–ª—É—á—à–∏—Ç—å"""
    builder = InlineKeyboardBuilder()
    builder.button(
        text=get_text(language, "improve_prompt"), 
        callback_data="improve_prompt"
    )
    builder.button(
        text=get_text(language, "keep_my_prompt"), 
        callback_data="keep_my_prompt"
    )
    builder.button(
        text=get_text(language, "back_to_templates"), 
        callback_data="back_to_templates"
    )
    builder.adjust(1)
    return builder.as_markup()

def get_generation_result_keyboard(language):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(
        text=get_text(language, "try_again"), 
        callback_data="try_again"
    )
    builder.button(
        text=get_text(language, "send_another_photo"), 
        callback_data="send_another_photo"
    )
    builder.button(
        text=get_text(language, "menu"), 
        callback_data="back_to_menu"
    )
    builder.adjust(1)
    return builder.as_markup()

def get_insufficient_balance_keyboard(language: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª—É—á–∞–µ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
    keyboard = [
        [InlineKeyboardButton(
            text=get_text(language, "top_up_balance_button"),
            callback_data="top_up_balance"
        )],
        [InlineKeyboardButton(
            text=get_text(language, "main_menu_button"),
            callback_data="back_to_menu"
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    
    if db.is_new_user(user_id):
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        await message.answer(
            get_text("ru", "welcome_new"),
            reply_markup=get_language_keyboard()
        )
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        language = db.get_user_language(user_id)
        await message.answer(
            get_text(language, "welcome_back"),
            reply_markup=get_main_menu_keyboard(language)
        )

@router.callback_query(F.data.startswith("lang_"))
async def language_selected(callback: CallbackQuery):
    user_id = callback.from_user.id
    language = callback.data.split("_")[1]
    
    if db.is_new_user(user_id):
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user(user_id, language)
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ–±–Ω–æ–≤–ª—è–µ—Ç —è–∑—ã–∫
        db.update_user_language(user_id, language)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text(
        get_text(language, "language_selected")
    )
    await callback.message.answer(
        get_text(language, "welcome_back"),
        reply_markup=get_main_menu_keyboard(language)
    )
    
    await callback.answer()

@router.callback_query(F.data == "send_photo")
async def send_photo_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    await callback.message.edit_text(
        get_text(language, "select_template"),
        reply_markup=get_templates_keyboard(language, page=0)
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("templates_page_"))
async def templates_page_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —à–∞–±–ª–æ–Ω–æ–≤"""
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split("_")[-1])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —à–∞–±–ª–æ–Ω–æ–≤
    await callback.message.edit_text(
        get_text(language, "select_template"),
        reply_markup=get_templates_keyboard(language, page=page)
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("template_"))
async def template_selected(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    template = callback.data.split("_")[1]
    balance = db.get_user_balance(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if balance < 50:
        await callback.answer(
            get_text(language, "insufficient_balance_generation", balance=balance)
        )
        await callback.message.answer(
            get_text(language, "top_up_balance_suggestion"),
            reply_markup=get_insufficient_balance_keyboard(language)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    await state.update_data(selected_template=template, prompt_type="template")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ñ–æ—Ç–æ
    await state.set_state(GenerationStates.waiting_for_photo)
    
    await callback.message.edit_text(
        get_text(language, "send_photo_for_generation", balance=balance)
    )
    
    await callback.answer()

@router.callback_query(F.data == "custom_prompt")
async def custom_prompt_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    await state.set_state(PromptStates.waiting_for_custom_prompt)
    
    await callback.message.edit_text(
        get_text(language, "enter_custom_prompt"),
        reply_markup=get_custom_prompt_keyboard(language)
    )
    
    await callback.answer()

@router.message(PromptStates.waiting_for_custom_prompt)
async def process_custom_prompt(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = db.get_user_language(user_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    await state.update_data(custom_prompt=message.text, prompt_type="custom")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–ª—É—á—à–∏—Ç—å
    await message.answer(
        get_text(language, "your_prompt", prompt=message.text),
        reply_markup=get_prompt_review_keyboard(language)
    )

@router.callback_query(F.data == "improve_prompt")
async def improve_prompt_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    balance = db.get_user_balance(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if balance < 15:
        await callback.answer(
            get_text(language, "insufficient_balance", balance=balance)
        )
        await callback.message.answer(
            get_text(language, "top_up_balance_suggestion"),
            reply_markup=get_insufficient_balance_keyboard(language)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    data = await state.get_data()
    custom_prompt = data.get("custom_prompt", "")
    
    if custom_prompt:
        # –°–ø–∏—Å—ã–≤–∞–µ–º 15 –∫—Ä–µ–¥–∏—Ç–æ–≤
        success, new_balance = db.deduct_credits(user_id, 15)
        
        if success:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
            improved_prompt = f"–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {custom_prompt} (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)"
            
            await callback.message.edit_text(
                f"{get_text(language, 'prompt_improved')}\n\n{improved_prompt}\n\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(custom_prompt=improved_prompt)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ñ–æ—Ç–æ
            await state.set_state(GenerationStates.waiting_for_photo)
            
            await callback.message.answer(
                get_text(language, "send_photo_for_generation", balance=new_balance)
            )
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
    else:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç!")
    
    await callback.answer()

@router.callback_query(F.data == "keep_my_prompt")
async def keep_my_prompt_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    balance = db.get_user_balance(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if balance < 50:
        await callback.answer(
            get_text(language, "insufficient_balance_generation", balance=balance)
        )
        await callback.message.answer(
            get_text(language, "top_up_balance_suggestion"),
            reply_markup=get_insufficient_balance_keyboard(language)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    data = await state.get_data()
    custom_prompt = data.get("custom_prompt", "")
    
    if custom_prompt:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –µ—Å—Ç—å
        await callback.message.edit_text(
            f"‚úÖ –í–∞—à –ø—Ä–æ–º–ø—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:\n\n{custom_prompt}"
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ñ–æ—Ç–æ
        await state.set_state(GenerationStates.waiting_for_photo)
        
        await callback.message.answer(
            get_text(language, "send_photo_for_generation", balance=balance)
        )
    else:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç!")
    
    await callback.answer()

@router.callback_query(F.data == "back_to_templates")
async def back_to_templates_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–æ–≤ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    await callback.message.edit_text(
        get_text(language, "select_template"),
        reply_markup=get_templates_keyboard(language, page=0)
    )
    
    await callback.answer()

@router.message(GenerationStates.waiting_for_photo)
async def process_photo_for_generation(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = db.get_user_language(user_id)
    balance = db.get_user_balance(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if balance < 50:
        await message.answer(
            get_text(language, "insufficient_balance_generation", balance=balance)
        )
        await message.answer(
            get_text(language, "top_up_balance_suggestion"),
            reply_markup=get_insufficient_balance_keyboard(language)
        )
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º 50 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    success, new_balance = db.deduct_credits(user_id, 50)
    
    if not success:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await message.answer(get_text(language, "generation_in_progress"))
    
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–ø—Ç–µ
        data = await state.get_data()
        prompt_type = data.get("prompt_type")
        
        if prompt_type == "template":
            template = data.get("selected_template")
            prompt_info = f"–®–∞–±–ª–æ–Ω: {template}"
        else:
            custom_prompt = data.get("custom_prompt", "")
            prompt_info = f"–ü—Ä–æ–º–ø—Ç: {custom_prompt}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ)
        await message.answer_photo(
            photo=message.photo[-1].file_id,
            caption=f"{get_text(language, 'generation_success')}\n\n{prompt_info}\n\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_generation_result_keyboard(language)
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
        db.add_balance(user_id, 50)
        restored_balance = db.get_user_balance(user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
        await message.answer(get_text(language, "credits_refunded"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        await message.answer(get_text(language, "generation_error"))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            get_text(language, "welcome_back"),
            reply_markup=get_main_menu_keyboard(language)
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

@router.callback_query(F.data == "try_again")
async def try_again_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    balance = db.get_user_balance(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if balance < 50:
        await callback.answer(
            get_text(language, "insufficient_balance_generation", balance=balance)
        )
        await callback.message.answer(
            get_text(language, "top_up_balance_suggestion"),
            reply_markup=get_insufficient_balance_keyboard(language)
        )
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º 50 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    success, new_balance = db.deduct_credits(user_id, 50)
    
    if not success:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await callback.message.edit_text(
        f"{get_text(language, 'generation_in_progress')}\n\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
    )
    
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–ø—Ç–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        # (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–µ—Å—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ callback_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ)
        await callback.message.answer_photo(
            photo=callback.message.reply_to_message.photo[-1].file_id if callback.message.reply_to_message and callback.message.reply_to_message.photo else None,
            caption=f"{get_text(language, 'generation_success')}\n\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_generation_result_keyboard(language)
        )
        
    except Exception as e:
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
        db.add_balance(user_id, 50)
        restored_balance = db.get_user_balance(user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
        await callback.message.answer(get_text(language, "credits_refunded"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        await callback.message.answer(get_text(language, "generation_error"))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer(
            get_text(language, "welcome_back"),
            reply_markup=get_main_menu_keyboard(language)
        )
    
    await callback.answer()

@router.callback_query(F.data == "send_another_photo")
async def send_another_photo_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    balance = db.get_user_balance(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if balance < 50:
        await callback.answer(
            get_text(language, "insufficient_balance_generation", balance=balance)
        )
        await callback.message.answer(
            get_text(language, "top_up_balance_suggestion"),
            reply_markup=get_insufficient_balance_keyboard(language)
        )
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ñ–æ—Ç–æ
    await state.set_state(GenerationStates.waiting_for_photo)
    
    await callback.message.edit_text(
        get_text(language, "send_photo_for_generation", balance=balance)
    )
    
    await callback.answer()

@router.callback_query(F.data == "settings")
async def settings_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    balance = db.get_user_balance(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_text = f"{get_text(language, 'profile')}\n\n{get_text(language, 'balance', balance=balance)}"
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=get_settings_keyboard(language, balance)
    )
    
    await callback.answer()

@router.callback_query(F.data == "top_up_balance")
async def top_up_balance_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await callback.message.edit_text(
        get_text(language, "select_payment_method"),
        reply_markup=get_payment_methods_keyboard(language)
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("payment_"))
async def payment_method_selected(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    payment_method = callback.data.split("_")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    await state.update_data(payment_method=payment_method)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã
    await state.set_state(PaymentStates.waiting_for_amount)
    
    await callback.message.edit_text(
        get_text(language, "enter_amount")
    )
    
    await callback.answer()

@router.message(PaymentStates.waiting_for_amount)
async def process_payment_amount(message: Message, state: FSMContext):
    user_id = message.from_user.id
    language = db.get_user_language(user_id)
    
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer(get_text(language, "amount_error"))
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        data = await state.get_data()
        payment_method = data.get("payment_method")
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É
        new_balance = db.add_balance(user_id, amount)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
        await message.answer(
            get_text(language, "balance_topped_up", amount=amount, new_balance=new_balance)
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        profile_text = f"{get_text(language, 'profile')}\n\n{get_text(language, 'balance', balance=new_balance)}"
        
        await message.answer(
            profile_text,
            reply_markup=get_settings_keyboard(language, new_balance)
        )
        
    except ValueError:
        await message.answer(get_text(language, "amount_error"))

@router.callback_query(F.data == "change_language")
async def change_language_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    current_language = db.get_user_language(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    await callback.message.edit_text(
        get_text(current_language, "select_new_language"),
        reply_markup=get_language_keyboard()
    )
    
    await callback.answer()

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text(
        get_text(language, "welcome_back"),
        reply_markup=get_main_menu_keyboard(language)
    )
    
    await callback.answer()

@router.callback_query(F.data == "back_to_settings")
async def back_to_settings_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    language = db.get_user_language(user_id)
    balance = db.get_user_balance(user_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    profile_text = f"{get_text(language, 'profile')}\n\n{get_text(language, 'balance', balance=balance)}"
    
    await callback.message.answer(
        profile_text,
        reply_markup=get_settings_keyboard(language, balance)
    )
    
    await callback.answer()

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    dp.include_router(router)
